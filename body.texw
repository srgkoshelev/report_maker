\section*{Trapped volume relief calculation for HAB Transfer lines}
\textbf{Assumptions:}
\begin{enumerate}
	\item Piping consists of horizontal and vertical sections.
	\item Flex hoses on the top are considered to be vertical.
	\item Vacuum is spoiled by air or fluid vapor; Vacuum jacket is ignored.
	\item Heat load is calculated in regards to outer diameter of the inner pipe. MLI thickness is ignored.
	\item The piping is considered to be a vessel with cryogenic liquid for maximum 110\% overpressure i.e. calculations are based on CGA S-1.3-2008 6.2.2.
	\item Each transfer line consists of 2 spools. Additionally, respective Piping spools are considered. %Both spools are affected at the same time (conservative approach).
	% \item Pressure drop is calculated for required flow through total length of piping.
\end{enumerate}

% Setting up calculation:
<<echo=False>>=
from math import *
import pprint
from pyrefprop import refprop as rp
from natu import config; config.simplification_level=0
from natu.units import *
from natu.units import kPa, uPa, kJ

import sys
sys.path.append(r'D:\Personal\Python repo')
from heat_transfer import cga, piping
u=g/mol #numerical equivalent of atomic mass unit
@

Initial conditions
<<>>=
fluid = 'Nitrogen'
P_set = 60*psig #set pressure

T_room = 100*degF #room temperature based on CGA S-1.3 6.2.2
Convection = 'natural'
Conv_flow = {'fluid':'air', 'T' : T_room, 'P':1*atm} #Flow outside #piping for convection and radiation heat load calculation
@

Trapped volume relief calculation considers vacuum failure for on of the sections. Piping sections:
<<echo=False>>=
from LN2_spools import * #piping as per convention
for number, Section_name in enumerate(Section_names):
	print ("Section #{0}: {1}".format(number, Section_name))
@

Determing conditions for internal fluid:
<<>>=
P_fr = 1.1*P_set #Flow rating pressure, 110% of P_set

prop = rp.setup('def', fluid)
x = prop.get('x', [1])
M = rp.wmol(x)['wmix']*g/mol

P_crit = rp.critp(x)['pcrit']*kPa #Critical pressure; If supercritical #flow, need to use specific input calculation
if P_fr <= P_crit:
	satur = rp.satp(P_fr/kPa, x) #K, saturation temp
	Temp = satur ['t']*K
	D_vap_0 = satur ['Dvap']*mol/L
else:
	Temp =  cga.max_theta(P_fr,x)
	D_vap_0 = rp.flsh('TP', Temp/K, P_fr/kPa, x) ['Dvap']*mol/L

Z = rp.therm2(Temp/K, D_vap_0/(mol/L), x)['Z'] #Compressibility factor

Internal_fluid = {'fluid':fluid, 'P':P_fr, 'T':Temp, }

for Pipe in Piping:
	Pipe.update({'fluid':Internal_fluid.copy()})
@

Since each section has separate vaccum space multiple fails are unlikely. Calculating required relief capacity for each section and determining maximum requirement:

<<>>=
Sections = cga.make_sections(Piping, Section_start)
Q_tot = 0*ft**3/min
for Section in Sections:
	Q_sect = 0*ft**3/min
	for Pipe in Section:
		#Required capacity due to vacuum loss
		Q_sect += cga.Q_vac(Pipe, Conv_flow, P_fr) 

	prop = rp.setup('def', fluid)
	x = prop.get('x', [1])
	M = rp.wmol(x)['wmix']*g/mol
	#Air condensation is assumed for liquids with normal boiling #point below 50 K
	if rp.satp(101.325, x)['t'] < 50: 
		Q_air_cond = 0*ft**3/min
		for Pipe in Section:
			Q_air_cond += cga.Q_air(Pipe, Conv_flow, P_fr) #Required capacity due to air condensation (if aplicable)
		Q_sect = max(Q_sect, Q_air_cond)

	Q_tot = max(Q_tot, Q_sect)
@
<<echo=False>>=
print ("Required relief valve with P_set = {:.3g} and capacity {:.3g} of standard air.".format(P_set, Q_tot))
@

\newpage
Detailed information on piping sections, dimensions and heat loads:
<<echo=False>>=
for Section, Name in zip (Sections, Section_names):
	print (Name)
	print()
	pprint.pprint (Section, width = 1)
	print ('\n\n')
@